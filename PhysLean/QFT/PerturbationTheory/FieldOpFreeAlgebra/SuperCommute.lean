/-
Copyright (c) 2025 Joseph Tooby-Smith. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Joseph Tooby-Smith
-/
import PhysLean.QFT.PerturbationTheory.FieldOpFreeAlgebra.Grading
import PhysLean.QFT.PerturbationTheory.FieldStatistics.ExchangeSign
/-!

# Super Commute
-/

namespace FieldSpecification
variable {ùìï : FieldSpecification}

namespace FieldOpFreeAlgebra

/-!

## The super commutator on the FieldOpFreeAlgebra.

-/

open FieldStatistic

/-- For a field specification `ùìï`, the super commutator `superCommuteF` is defined as the linear
  map `ùìï.FieldOpFreeAlgebra ‚Üí‚Çó[‚ÑÇ] ùìï.FieldOpFreeAlgebra ‚Üí‚Çó[‚ÑÇ] ùìï.FieldOpFreeAlgebra`
  which on the lists `œÜs` and `œÜs'` of `ùìï.CrAnFieldOp` gives

  `superCommuteF œÜs œÜs' = œÜs * œÜs' - ùì¢(œÜs, œÜs') ‚Ä¢ œÜs' * œÜs`.

  The notation `[a, b]‚ÇõF` can be used for `superCommuteF a b`. -/
noncomputable def superCommuteF : ùìï.FieldOpFreeAlgebra ‚Üí‚Çó[‚ÑÇ] ùìï.FieldOpFreeAlgebra ‚Üí‚Çó[‚ÑÇ]
    ùìï.FieldOpFreeAlgebra :=
  Basis.constr ofCrAnListFBasis ‚ÑÇ fun œÜs =>
  Basis.constr ofCrAnListFBasis ‚ÑÇ fun œÜs' =>
  ofCrAnListF (œÜs ++ œÜs') - ùì¢(ùìï |>‚Çõ œÜs, ùìï |>‚Çõ œÜs') ‚Ä¢ ofCrAnListF (œÜs' ++ œÜs)

@[inherit_doc superCommuteF]
scoped[FieldSpecification.FieldOpFreeAlgebra] notation "[" œÜs "," œÜs' "]‚ÇõF" => superCommuteF œÜs œÜs'

/-!

## The super commutator of different types of elements

-/

lemma superCommuteF_ofCrAnListF_ofCrAnListF (œÜs œÜs' : List ùìï.CrAnFieldOp) :
    [ofCrAnListF œÜs, ofCrAnListF œÜs']‚ÇõF =
    ofCrAnListF (œÜs ++ œÜs') - ùì¢(ùìï |>‚Çõ œÜs, ùìï |>‚Çõ œÜs') ‚Ä¢ ofCrAnListF (œÜs' ++ œÜs) := by
  rw [‚Üê ofListBasis_eq_ofList, ‚Üê ofListBasis_eq_ofList]
  simp only [superCommuteF, Basis.constr_basis]

lemma superCommuteF_ofCrAnOpF_ofCrAnOpF (œÜ œÜ' : ùìï.CrAnFieldOp) :
    [ofCrAnOpF œÜ, ofCrAnOpF œÜ']‚ÇõF =
    ofCrAnOpF œÜ * ofCrAnOpF œÜ' - ùì¢(ùìï |>‚Çõ œÜ, ùìï |>‚Çõ œÜ') ‚Ä¢ ofCrAnOpF œÜ' * ofCrAnOpF œÜ := by
  rw [‚Üê ofCrAnListF_singleton, ‚Üê ofCrAnListF_singleton]
  rw [superCommuteF_ofCrAnListF_ofCrAnListF, ofCrAnListF_append]
  congr
  rw [ofCrAnListF_append]
  rw [FieldStatistic.ofList_singleton, FieldStatistic.ofList_singleton, smul_mul_assoc]

lemma superCommuteF_ofCrAnListF_ofFieldOpFsList (œÜcas : List ùìï.CrAnFieldOp) (œÜs : List ùìï.FieldOp) :
    [ofCrAnListF œÜcas, ofFieldOpListF œÜs]‚ÇõF = ofCrAnListF œÜcas * ofFieldOpListF œÜs -
    ùì¢(ùìï |>‚Çõ œÜcas, ùìï |>‚Çõ œÜs) ‚Ä¢ ofFieldOpListF œÜs * ofCrAnListF œÜcas := by
  conv_lhs => rw [ofFieldOpListF_sum]
  rw [map_sum]
  conv_lhs =>
    enter [2, x]
    rw [superCommuteF_ofCrAnListF_ofCrAnListF, CrAnSection.statistics_eq_state_statistics,
      ofCrAnListF_append, ofCrAnListF_append]
  rw [Finset.sum_sub_distrib, ‚Üê Finset.mul_sum, ‚Üê Finset.smul_sum,
    ‚Üê Finset.sum_mul, ‚Üê ofFieldOpListF_sum]
  simp

lemma superCommuteF_ofFieldOpListF_ofFieldOpFsList (œÜ : List ùìï.FieldOp) (œÜs : List ùìï.FieldOp) :
    [ofFieldOpListF œÜ, ofFieldOpListF œÜs]‚ÇõF = ofFieldOpListF œÜ * ofFieldOpListF œÜs -
    ùì¢(ùìï |>‚Çõ œÜ, ùìï |>‚Çõ œÜs) ‚Ä¢ ofFieldOpListF œÜs * ofFieldOpListF œÜ := by
  conv_lhs => rw [ofFieldOpListF_sum]
  simp only [map_sum, LinearMap.coeFn_sum, Finset.sum_apply, instCommGroup.eq_1,
    Algebra.smul_mul_assoc]
  conv_lhs =>
    enter [2, x]
    rw [superCommuteF_ofCrAnListF_ofFieldOpFsList]
  simp only [instCommGroup.eq_1, CrAnSection.statistics_eq_state_statistics,
    Algebra.smul_mul_assoc, Finset.sum_sub_distrib]
  rw [‚Üê Finset.sum_mul, ‚Üê Finset.smul_sum, ‚Üê Finset.mul_sum, ‚Üê ofFieldOpListF_sum]

lemma superCommuteF_ofFieldOpF_ofFieldOpFsList (œÜ : ùìï.FieldOp) (œÜs : List ùìï.FieldOp) :
    [ofFieldOpF œÜ, ofFieldOpListF œÜs]‚ÇõF = ofFieldOpF œÜ * ofFieldOpListF œÜs -
    ùì¢(ùìï |>‚Çõ œÜ, ùìï |>‚Çõ œÜs) ‚Ä¢ ofFieldOpListF œÜs * ofFieldOpF œÜ := by
  rw [‚Üê ofFieldOpListF_singleton, superCommuteF_ofFieldOpListF_ofFieldOpFsList,
    ofFieldOpListF_singleton]
  simp

lemma superCommuteF_ofFieldOpListF_ofFieldOpF (œÜs : List ùìï.FieldOp) (œÜ : ùìï.FieldOp) :
    [ofFieldOpListF œÜs, ofFieldOpF œÜ]‚ÇõF = ofFieldOpListF œÜs * ofFieldOpF œÜ -
    ùì¢(ùìï |>‚Çõ œÜs, ùìï |>‚Çõ œÜ) ‚Ä¢ ofFieldOpF œÜ * ofFieldOpListF œÜs := by
  rw [‚Üê ofFieldOpListF_singleton, superCommuteF_ofFieldOpListF_ofFieldOpFsList,
    ofFieldOpListF_singleton]
  simp

lemma superCommuteF_anPartF_crPartF (œÜ œÜ' : ùìï.FieldOp) :
    [anPartF œÜ, crPartF œÜ']‚ÇõF = anPartF œÜ * crPartF œÜ' -
    ùì¢(ùìï |>‚Çõ œÜ, ùìï |>‚Çõ œÜ') ‚Ä¢ crPartF œÜ' * anPartF œÜ := by
  match œÜ, œÜ' with
  | FieldOp.inAsymp œÜ, _ =>
    simp
  | _, FieldOp.outAsymp œÜ =>
    simp only [crPartF_posAsymp, map_zero, mul_zero, instCommGroup.eq_1, smul_zero, zero_mul,
      sub_self]
  | FieldOp.position œÜ, FieldOp.position œÜ' =>
    simp only [anPartF_position, crPartF_position, instCommGroup.eq_1, Algebra.smul_mul_assoc]
    rw [‚Üê ofCrAnListF_singleton, ‚Üê ofCrAnListF_singleton, superCommuteF_ofCrAnListF_ofCrAnListF]
    simp [crAnStatistics, ‚Üê ofCrAnListF_append]
  | FieldOp.outAsymp œÜ, FieldOp.position œÜ' =>
    simp only [anPartF_posAsymp, crPartF_position, instCommGroup.eq_1, Algebra.smul_mul_assoc]
    rw [‚Üê ofCrAnListF_singleton, ‚Üê ofCrAnListF_singleton, superCommuteF_ofCrAnListF_ofCrAnListF]
    simp [crAnStatistics, ‚Üê ofCrAnListF_append]
  | FieldOp.position œÜ, FieldOp.inAsymp œÜ' =>
    simp only [anPartF_position, crPartF_negAsymp, instCommGroup.eq_1, Algebra.smul_mul_assoc]
    rw [‚Üê ofCrAnListF_singleton, ‚Üê ofCrAnListF_singleton, superCommuteF_ofCrAnListF_ofCrAnListF]
    simp only [List.singleton_append, instCommGroup.eq_1, crAnStatistics,
      FieldStatistic.ofList_singleton, Function.comp_apply, crAnFieldOpToFieldOp_prod, ‚Üê
      ofCrAnListF_append]
  | FieldOp.outAsymp œÜ, FieldOp.inAsymp œÜ' =>
    simp only [anPartF_posAsymp, crPartF_negAsymp, instCommGroup.eq_1, Algebra.smul_mul_assoc]
    rw [‚Üê ofCrAnListF_singleton, ‚Üê ofCrAnListF_singleton, superCommuteF_ofCrAnListF_ofCrAnListF]
    simp [crAnStatistics, ‚Üê ofCrAnListF_append]

lemma superCommuteF_crPartF_anPartF (œÜ œÜ' : ùìï.FieldOp) :
    [crPartF œÜ, anPartF œÜ']‚ÇõF = crPartF œÜ * anPartF œÜ' -
    ùì¢(ùìï |>‚Çõ œÜ, ùìï |>‚Çõ œÜ') ‚Ä¢ anPartF œÜ' * crPartF œÜ := by
    match œÜ, œÜ' with
    | FieldOp.outAsymp œÜ, _ =>
    simp only [crPartF_posAsymp, map_zero, LinearMap.zero_apply, zero_mul, instCommGroup.eq_1,
      mul_zero, sub_self]
    | _, FieldOp.inAsymp œÜ =>
    simp only [anPartF_negAsymp, map_zero, mul_zero, instCommGroup.eq_1, smul_zero, zero_mul,
      sub_self]
    | FieldOp.position œÜ, FieldOp.position œÜ' =>
    simp only [crPartF_position, anPartF_position, instCommGroup.eq_1, Algebra.smul_mul_assoc]
    rw [‚Üê ofCrAnListF_singleton, ‚Üê ofCrAnListF_singleton, superCommuteF_ofCrAnListF_ofCrAnListF]
    simp [crAnStatistics, ‚Üê ofCrAnListF_append]
    | FieldOp.position œÜ, FieldOp.outAsymp œÜ' =>
    simp only [crPartF_position, anPartF_posAsymp, instCommGroup.eq_1, Algebra.smul_mul_assoc]
    rw [‚Üê ofCrAnListF_singleton, ‚Üê ofCrAnListF_singleton, superCommuteF_ofCrAnListF_ofCrAnListF]
    simp [crAnStatistics, ‚Üê ofCrAnListF_append]
    | FieldOp.inAsymp œÜ, FieldOp.position œÜ' =>
    simp only [crPartF_negAsymp, anPartF_position, instCommGroup.eq_1, Algebra.smul_mul_assoc]
    rw [‚Üê ofCrAnListF_singleton, ‚Üê ofCrAnListF_singleton, superCommuteF_ofCrAnListF_ofCrAnListF]
    simp [crAnStatistics, ‚Üê ofCrAnListF_append]
    | FieldOp.inAsymp œÜ, FieldOp.outAsymp œÜ' =>
    simp only [crPartF_negAsymp, anPartF_posAsymp, instCommGroup.eq_1, Algebra.smul_mul_assoc]
    rw [‚Üê ofCrAnListF_singleton, ‚Üê ofCrAnListF_singleton, superCommuteF_ofCrAnListF_ofCrAnListF]
    simp [crAnStatistics, ‚Üê ofCrAnListF_append]

lemma superCommuteF_crPartF_crPartF (œÜ œÜ' : ùìï.FieldOp) :
    [crPartF œÜ, crPartF œÜ']‚ÇõF = crPartF œÜ * crPartF œÜ' -
    ùì¢(ùìï |>‚Çõ œÜ, ùìï |>‚Çõ œÜ') ‚Ä¢ crPartF œÜ' * crPartF œÜ := by
  match œÜ, œÜ' with
  | FieldOp.outAsymp œÜ, _ =>
  simp only [crPartF_posAsymp, map_zero, LinearMap.zero_apply, zero_mul, instCommGroup.eq_1,
    mul_zero, sub_self]
  | _, FieldOp.outAsymp œÜ =>
  simp only [crPartF_posAsymp, map_zero, mul_zero, instCommGroup.eq_1, smul_zero, zero_mul,
    sub_self]
  | FieldOp.position œÜ, FieldOp.position œÜ' =>
  simp only [crPartF_position, instCommGroup.eq_1, Algebra.smul_mul_assoc]
  rw [‚Üê ofCrAnListF_singleton, ‚Üê ofCrAnListF_singleton, superCommuteF_ofCrAnListF_ofCrAnListF]
  simp [crAnStatistics, ‚Üê ofCrAnListF_append]
  | FieldOp.position œÜ, FieldOp.inAsymp œÜ' =>
  simp only [crPartF_position, crPartF_negAsymp, instCommGroup.eq_1, Algebra.smul_mul_assoc]
  rw [‚Üê ofCrAnListF_singleton, ‚Üê ofCrAnListF_singleton, superCommuteF_ofCrAnListF_ofCrAnListF]
  simp [crAnStatistics, ‚Üê ofCrAnListF_append]
  | FieldOp.inAsymp œÜ, FieldOp.position œÜ' =>
  simp only [crPartF_negAsymp, crPartF_position, instCommGroup.eq_1, Algebra.smul_mul_assoc]
  rw [‚Üê ofCrAnListF_singleton, ‚Üê ofCrAnListF_singleton, superCommuteF_ofCrAnListF_ofCrAnListF]
  simp [crAnStatistics, ‚Üê ofCrAnListF_append]
  | FieldOp.inAsymp œÜ, FieldOp.inAsymp œÜ' =>
  simp only [crPartF_negAsymp, instCommGroup.eq_1, Algebra.smul_mul_assoc]
  rw [‚Üê ofCrAnListF_singleton, ‚Üê ofCrAnListF_singleton, superCommuteF_ofCrAnListF_ofCrAnListF]
  simp [crAnStatistics, ‚Üê ofCrAnListF_append]

lemma superCommuteF_anPartF_anPartF (œÜ œÜ' : ùìï.FieldOp) :
    [anPartF œÜ, anPartF œÜ']‚ÇõF =
    anPartF œÜ * anPartF œÜ' - ùì¢(ùìï |>‚Çõ œÜ, ùìï |>‚Çõ œÜ') ‚Ä¢ anPartF œÜ' * anPartF œÜ := by
  match œÜ, œÜ' with
  | FieldOp.inAsymp œÜ, _ =>
    simp
  | _, FieldOp.inAsymp œÜ =>
    simp
  | FieldOp.position œÜ, FieldOp.position œÜ' =>
    simp only [anPartF_position, instCommGroup.eq_1, Algebra.smul_mul_assoc]
    rw [‚Üê ofCrAnListF_singleton, ‚Üê ofCrAnListF_singleton, superCommuteF_ofCrAnListF_ofCrAnListF]
    simp [crAnStatistics, ‚Üê ofCrAnListF_append]
  | FieldOp.position œÜ, FieldOp.outAsymp œÜ' =>
    simp only [anPartF_position, anPartF_posAsymp, instCommGroup.eq_1, Algebra.smul_mul_assoc]
    rw [‚Üê ofCrAnListF_singleton, ‚Üê ofCrAnListF_singleton, superCommuteF_ofCrAnListF_ofCrAnListF]
    simp [crAnStatistics, ‚Üê ofCrAnListF_append]
  | FieldOp.outAsymp œÜ, FieldOp.position œÜ' =>
    simp only [anPartF_posAsymp, anPartF_position, instCommGroup.eq_1, Algebra.smul_mul_assoc]
    rw [‚Üê ofCrAnListF_singleton, ‚Üê ofCrAnListF_singleton, superCommuteF_ofCrAnListF_ofCrAnListF]
    simp [crAnStatistics, ‚Üê ofCrAnListF_append]
  | FieldOp.outAsymp œÜ, FieldOp.outAsymp œÜ' =>
    simp only [anPartF_posAsymp, instCommGroup.eq_1, Algebra.smul_mul_assoc]
    rw [‚Üê ofCrAnListF_singleton, ‚Üê ofCrAnListF_singleton, superCommuteF_ofCrAnListF_ofCrAnListF]
    simp [crAnStatistics, ‚Üê ofCrAnListF_append]

lemma superCommuteF_crPartF_ofFieldOpListF (œÜ : ùìï.FieldOp) (œÜs : List ùìï.FieldOp) :
    [crPartF œÜ, ofFieldOpListF œÜs]‚ÇõF =
    crPartF œÜ * ofFieldOpListF œÜs - ùì¢(ùìï |>‚Çõ œÜ, ùìï |>‚Çõ œÜs) ‚Ä¢ ofFieldOpListF œÜs *
    crPartF œÜ := by
  match œÜ with
  | FieldOp.inAsymp œÜ =>
    simp only [crPartF_negAsymp, instCommGroup.eq_1, Algebra.smul_mul_assoc]
    rw [‚Üê ofCrAnListF_singleton, superCommuteF_ofCrAnListF_ofFieldOpFsList]
    simp [crAnStatistics]
  | FieldOp.position œÜ =>
    simp only [crPartF_position, instCommGroup.eq_1, Algebra.smul_mul_assoc]
    rw [‚Üê ofCrAnListF_singleton, superCommuteF_ofCrAnListF_ofFieldOpFsList]
    simp [crAnStatistics]
  | FieldOp.outAsymp œÜ =>
    simp

lemma superCommuteF_anPartF_ofFieldOpListF (œÜ : ùìï.FieldOp) (œÜs : List ùìï.FieldOp) :
    [anPartF œÜ, ofFieldOpListF œÜs]‚ÇõF =
    anPartF œÜ * ofFieldOpListF œÜs - ùì¢(ùìï |>‚Çõ œÜ, ùìï |>‚Çõ œÜs) ‚Ä¢
    ofFieldOpListF œÜs * anPartF œÜ := by
  match œÜ with
  | FieldOp.inAsymp œÜ =>
    simp
  | FieldOp.position œÜ =>
    simp only [anPartF_position, instCommGroup.eq_1, Algebra.smul_mul_assoc]
    rw [‚Üê ofCrAnListF_singleton, superCommuteF_ofCrAnListF_ofFieldOpFsList]
    simp [crAnStatistics]
  | FieldOp.outAsymp œÜ =>
    simp only [anPartF_posAsymp, instCommGroup.eq_1, Algebra.smul_mul_assoc]
    rw [‚Üê ofCrAnListF_singleton, superCommuteF_ofCrAnListF_ofFieldOpFsList]
    simp [crAnStatistics]

lemma superCommuteF_crPartF_ofFieldOpF (œÜ œÜ' : ùìï.FieldOp) :
    [crPartF œÜ, ofFieldOpF œÜ']‚ÇõF =
    crPartF œÜ * ofFieldOpF œÜ' -
    ùì¢(ùìï |>‚Çõ œÜ, ùìï |>‚Çõ œÜ') ‚Ä¢ ofFieldOpF œÜ' * crPartF œÜ := by
  rw [‚Üê ofFieldOpListF_singleton, superCommuteF_crPartF_ofFieldOpListF]
  simp

lemma superCommuteF_anPartF_ofFieldOpF (œÜ œÜ' : ùìï.FieldOp) :
    [anPartF œÜ, ofFieldOpF œÜ']‚ÇõF =
    anPartF œÜ * ofFieldOpF œÜ' -
    ùì¢(ùìï |>‚Çõ œÜ, ùìï |>‚Çõ œÜ') ‚Ä¢ ofFieldOpF œÜ' * anPartF œÜ := by
  rw [‚Üê ofFieldOpListF_singleton, superCommuteF_anPartF_ofFieldOpListF]
  simp

/-!

## Mul equal superCommuteF

Lemmas which rewrite a multiplication of two elements of the algebra as their commuted
multiplication with a sign plus the super commutator.

-/
lemma ofCrAnListF_mul_ofCrAnListF_eq_superCommuteF (œÜs œÜs' : List ùìï.CrAnFieldOp) :
    ofCrAnListF œÜs * ofCrAnListF œÜs' = ùì¢(ùìï |>‚Çõ œÜs, ùìï |>‚Çõ œÜs') ‚Ä¢ ofCrAnListF œÜs' * ofCrAnListF œÜs
    + [ofCrAnListF œÜs, ofCrAnListF œÜs']‚ÇõF := by
  rw [superCommuteF_ofCrAnListF_ofCrAnListF]
  simp [ofCrAnListF_append]

lemma ofCrAnOpF_mul_ofCrAnListF_eq_superCommuteF (œÜ : ùìï.CrAnFieldOp) (œÜs' : List ùìï.CrAnFieldOp) :
    ofCrAnOpF œÜ * ofCrAnListF œÜs' = ùì¢(ùìï |>‚Çõ œÜ, ùìï |>‚Çõ œÜs') ‚Ä¢ ofCrAnListF œÜs' * ofCrAnOpF œÜ
    + [ofCrAnOpF œÜ, ofCrAnListF œÜs']‚ÇõF := by
  rw [‚Üê ofCrAnListF_singleton, ofCrAnListF_mul_ofCrAnListF_eq_superCommuteF]
  simp

lemma ofFieldOpListF_mul_ofFieldOpListF_eq_superCommuteF (œÜs œÜs' : List ùìï.FieldOp) :
    ofFieldOpListF œÜs * ofFieldOpListF œÜs' =
    ùì¢(ùìï |>‚Çõ œÜs, ùìï |>‚Çõ œÜs') ‚Ä¢ ofFieldOpListF œÜs' * ofFieldOpListF œÜs
    + [ofFieldOpListF œÜs, ofFieldOpListF œÜs']‚ÇõF := by
  rw [superCommuteF_ofFieldOpListF_ofFieldOpFsList]
  simp

lemma ofFieldOpF_mul_ofFieldOpListF_eq_superCommuteF (œÜ : ùìï.FieldOp) (œÜs' : List ùìï.FieldOp) :
    ofFieldOpF œÜ * ofFieldOpListF œÜs' = ùì¢(ùìï |>‚Çõ œÜ, ùìï |>‚Çõ œÜs') ‚Ä¢ ofFieldOpListF œÜs' * ofFieldOpF œÜ
    + [ofFieldOpF œÜ, ofFieldOpListF œÜs']‚ÇõF := by
  rw [superCommuteF_ofFieldOpF_ofFieldOpFsList]
  simp

lemma ofFieldOpListF_mul_ofFieldOpF_eq_superCommuteF (œÜs : List ùìï.FieldOp) (œÜ : ùìï.FieldOp) :
    ofFieldOpListF œÜs * ofFieldOpF œÜ = ùì¢(ùìï |>‚Çõ œÜs, ùìï |>‚Çõ œÜ) ‚Ä¢ ofFieldOpF œÜ * ofFieldOpListF œÜs
    + [ofFieldOpListF œÜs, ofFieldOpF œÜ]‚ÇõF := by
  rw [superCommuteF_ofFieldOpListF_ofFieldOpF]
  simp

lemma crPartF_mul_anPartF_eq_superCommuteF (œÜ œÜ' : ùìï.FieldOp) :
    crPartF œÜ * anPartF œÜ' =
    ùì¢(ùìï |>‚Çõ œÜ, ùìï |>‚Çõ œÜ') ‚Ä¢ anPartF œÜ' * crPartF œÜ +
    [crPartF œÜ, anPartF œÜ']‚ÇõF := by
  rw [superCommuteF_crPartF_anPartF]
  simp

lemma anPartF_mul_crPartF_eq_superCommuteF (œÜ œÜ' : ùìï.FieldOp) :
    anPartF œÜ * crPartF œÜ' =
    ùì¢(ùìï |>‚Çõ œÜ, ùìï |>‚Çõ œÜ') ‚Ä¢
    crPartF œÜ' * anPartF œÜ +
    [anPartF œÜ, crPartF œÜ']‚ÇõF := by
  rw [superCommuteF_anPartF_crPartF]
  simp

lemma crPartF_mul_crPartF_eq_superCommuteF (œÜ œÜ' : ùìï.FieldOp) :
    crPartF œÜ * crPartF œÜ' =
    ùì¢(ùìï |>‚Çõ œÜ, ùìï |>‚Çõ œÜ') ‚Ä¢ crPartF œÜ' * crPartF œÜ +
    [crPartF œÜ, crPartF œÜ']‚ÇõF := by
  rw [superCommuteF_crPartF_crPartF]
  simp

lemma anPartF_mul_anPartF_eq_superCommuteF (œÜ œÜ' : ùìï.FieldOp) :
    anPartF œÜ * anPartF œÜ' = ùì¢(ùìï |>‚Çõ œÜ, ùìï |>‚Çõ œÜ') ‚Ä¢ anPartF œÜ' * anPartF œÜ +
    [anPartF œÜ, anPartF œÜ']‚ÇõF := by
  rw [superCommuteF_anPartF_anPartF]
  simp

lemma ofCrAnListF_mul_ofFieldOpListF_eq_superCommuteF (œÜs : List ùìï.CrAnFieldOp)
    (œÜs' : List ùìï.FieldOp) : ofCrAnListF œÜs * ofFieldOpListF œÜs' =
    ùì¢(ùìï |>‚Çõ œÜs, ùìï |>‚Çõ œÜs') ‚Ä¢ ofFieldOpListF œÜs' * ofCrAnListF œÜs
    + [ofCrAnListF œÜs, ofFieldOpListF œÜs']‚ÇõF := by
  rw [superCommuteF_ofCrAnListF_ofFieldOpFsList]
  simp

/-!

## Symmetry of the super commutator.

-/

lemma superCommuteF_ofCrAnListF_ofCrAnListF_symm (œÜs œÜs' : List ùìï.CrAnFieldOp) :
    [ofCrAnListF œÜs, ofCrAnListF œÜs']‚ÇõF =
    (- ùì¢(ùìï |>‚Çõ œÜs, ùìï |>‚Çõ œÜs')) ‚Ä¢ [ofCrAnListF œÜs', ofCrAnListF œÜs]‚ÇõF := by
  rw [superCommuteF_ofCrAnListF_ofCrAnListF, superCommuteF_ofCrAnListF_ofCrAnListF, smul_sub]
  simp only [instCommGroup.eq_1, neg_smul, sub_neg_eq_add]
  rw [smul_smul]
  conv_rhs =>
    rhs
    rw [exchangeSign_symm, exchangeSign_mul_self]
  simp only [one_smul]
  abel

lemma superCommuteF_ofCrAnOpF_ofCrAnOpF_symm (œÜ œÜ' : ùìï.CrAnFieldOp) :
    [ofCrAnOpF œÜ, ofCrAnOpF œÜ']‚ÇõF =
    (- ùì¢(ùìï |>‚Çõ œÜ, ùìï |>‚Çõ œÜ')) ‚Ä¢ [ofCrAnOpF œÜ', ofCrAnOpF œÜ]‚ÇõF := by
  rw [superCommuteF_ofCrAnOpF_ofCrAnOpF, superCommuteF_ofCrAnOpF_ofCrAnOpF]
  rw [smul_sub]
  simp only [instCommGroup.eq_1, Algebra.smul_mul_assoc, neg_smul, sub_neg_eq_add]
  rw [smul_smul]
  conv_rhs =>
    rhs
    rw [exchangeSign_symm, exchangeSign_mul_self]
  simp only [one_smul]
  abel

/-!

## Splitting the super commutator on lists into sums.

-/

lemma superCommuteF_ofCrAnListF_ofCrAnListF_cons (œÜ : ùìï.CrAnFieldOp) (œÜs œÜs' : List ùìï.CrAnFieldOp) :
    [ofCrAnListF œÜs, ofCrAnListF (œÜ :: œÜs')]‚ÇõF =
    [ofCrAnListF œÜs, ofCrAnOpF œÜ]‚ÇõF * ofCrAnListF œÜs' +
    ùì¢(ùìï |>‚Çõ œÜs, ùìï |>‚Çõ œÜ)
    ‚Ä¢ ofCrAnOpF œÜ * [ofCrAnListF œÜs, ofCrAnListF œÜs']‚ÇõF := by
  rw [superCommuteF_ofCrAnListF_ofCrAnListF]
  conv_rhs =>
    lhs
    rw [‚Üê ofCrAnListF_singleton, superCommuteF_ofCrAnListF_ofCrAnListF, sub_mul,
      ‚Üê ofCrAnListF_append]
    rhs
    rw [FieldStatistic.ofList_singleton, ofCrAnListF_append, ofCrAnListF_singleton, smul_mul_assoc,
      mul_assoc, ‚Üê ofCrAnListF_append]
  conv_rhs =>
    rhs
    rw [superCommuteF_ofCrAnListF_ofCrAnListF, mul_sub, smul_mul_assoc]
  simp only [instCommGroup.eq_1, List.cons_append, List.append_assoc, List.nil_append,
    Algebra.mul_smul_comm, Algebra.smul_mul_assoc, sub_add_sub_cancel, sub_right_inj]
  rw [‚Üê ofCrAnListF_cons, smul_smul, FieldStatistic.ofList_cons_eq_mul]
  simp only [instCommGroup, map_mul, mul_comm]

lemma superCommuteF_ofCrAnListF_ofFieldOpListF_cons (œÜ : ùìï.FieldOp) (œÜs : List ùìï.CrAnFieldOp)
    (œÜs' : List ùìï.FieldOp) : [ofCrAnListF œÜs, ofFieldOpListF (œÜ :: œÜs')]‚ÇõF =
    [ofCrAnListF œÜs, ofFieldOpF œÜ]‚ÇõF * ofFieldOpListF œÜs' +
    ùì¢(ùìï |>‚Çõ œÜs, ùìï |>‚Çõ œÜ) ‚Ä¢ ofFieldOpF œÜ * [ofCrAnListF œÜs, ofFieldOpListF œÜs']‚ÇõF := by
  rw [superCommuteF_ofCrAnListF_ofFieldOpFsList]
  conv_rhs =>
    lhs
    rw [‚Üê ofFieldOpListF_singleton, superCommuteF_ofCrAnListF_ofFieldOpFsList, sub_mul, mul_assoc,
      ‚Üê ofFieldOpListF_append]
    rhs
    rw [FieldStatistic.ofList_singleton, ofFieldOpListF_singleton, smul_mul_assoc,
      smul_mul_assoc, mul_assoc]
  conv_rhs =>
    rhs
    rw [superCommuteF_ofCrAnListF_ofFieldOpFsList, mul_sub, smul_mul_assoc]
  simp only [instCommGroup, Algebra.smul_mul_assoc, List.singleton_append, Algebra.mul_smul_comm,
    sub_add_sub_cancel, sub_right_inj]
  rw [ofFieldOpListF_cons, mul_assoc, smul_smul, FieldStatistic.ofList_cons_eq_mul]
  simp [mul_comm]

/--
For a field specification `ùìï`, and two lists `œÜs = œÜ‚ÇÄ‚Ä¶œÜ‚Çô` and `œÜs'` of `ùìï.CrAnFieldOp`
the following super commutation relation holds:

`[œÜs', œÜ‚ÇÄ‚Ä¶œÜ‚Çô]‚ÇõF = ‚àë i, ùì¢(œÜs', œÜ‚ÇÄ‚Ä¶œÜ·µ¢‚Çã‚ÇÅ) ‚Ä¢ œÜ‚ÇÄ‚Ä¶œÜ·µ¢‚Çã‚ÇÅ * [œÜs', œÜ·µ¢]‚ÇõF * œÜ·µ¢‚Çä‚ÇÅ ‚Ä¶ œÜ‚Çô`

The proof of this relation is via induction on the length of `œÜs`.
-/
lemma superCommuteF_ofCrAnListF_ofCrAnListF_eq_sum (œÜs : List ùìï.CrAnFieldOp) :
    (œÜs' : List ùìï.CrAnFieldOp) ‚Üí [ofCrAnListF œÜs, ofCrAnListF œÜs']‚ÇõF =
    ‚àë (n : Fin œÜs'.length), ùì¢(ùìï |>‚Çõ œÜs, ùìï |>‚Çõ œÜs'.take n) ‚Ä¢
    ofCrAnListF (œÜs'.take n) * [ofCrAnListF œÜs, ofCrAnOpF (œÜs'.get n)]‚ÇõF *
    ofCrAnListF (œÜs'.drop (n + 1))
  | [] => by
    simp [‚Üê ofCrAnListF_nil, superCommuteF_ofCrAnListF_ofCrAnListF]
  | œÜ :: œÜs' => by
    rw [superCommuteF_ofCrAnListF_ofCrAnListF_cons,
      superCommuteF_ofCrAnListF_ofCrAnListF_eq_sum œÜs œÜs']
    conv_rhs => erw [Fin.sum_univ_succ]
    congr 1
    ¬∑ simp
    ¬∑ simp [Finset.mul_sum, smul_smul, ofCrAnListF_cons, mul_assoc,
        FieldStatistic.ofList_cons_eq_mul, mul_comm]

lemma superCommuteF_ofCrAnListF_ofFieldOpListF_eq_sum (œÜs : List ùìï.CrAnFieldOp) :
    (œÜs' : List ùìï.FieldOp) ‚Üí
    [ofCrAnListF œÜs, ofFieldOpListF œÜs']‚ÇõF =
    ‚àë (n : Fin œÜs'.length), ùì¢(ùìï |>‚Çõ œÜs, ùìï |>‚Çõ œÜs'.take n) ‚Ä¢
      ofFieldOpListF (œÜs'.take n) * [ofCrAnListF œÜs, ofFieldOpF (œÜs'.get n)]‚ÇõF *
      ofFieldOpListF (œÜs'.drop (n + 1))
  | [] => by
    simp only [superCommuteF_ofCrAnListF_ofFieldOpFsList, instCommGroup, ofList_empty,
      exchangeSign_bosonic, one_smul, List.length_nil, Finset.univ_eq_empty, List.take_nil,
      List.get_eq_getElem, List.drop_nil, Finset.sum_empty]
    simp
  | œÜ :: œÜs' => by
    rw [superCommuteF_ofCrAnListF_ofFieldOpListF_cons,
      superCommuteF_ofCrAnListF_ofFieldOpListF_eq_sum œÜs œÜs']
    conv_rhs => erw [Fin.sum_univ_succ]
    congr 1
    ¬∑ simp
    ¬∑ simp [Finset.mul_sum, smul_smul, ofFieldOpListF_cons, mul_assoc,
        FieldStatistic.ofList_cons_eq_mul, mul_comm]

lemma summerCommute_jacobi_ofCrAnListF (œÜs1 œÜs2 œÜs3 : List ùìï.CrAnFieldOp) :
    [ofCrAnListF œÜs1, [ofCrAnListF œÜs2, ofCrAnListF œÜs3]‚ÇõF]‚ÇõF =
    ùì¢(ùìï |>‚Çõ œÜs1, ùìï |>‚Çõ œÜs3) ‚Ä¢
    (- ùì¢(ùìï |>‚Çõ œÜs2, ùìï |>‚Çõ œÜs3) ‚Ä¢ [ofCrAnListF œÜs3, [ofCrAnListF œÜs1, ofCrAnListF œÜs2]‚ÇõF]‚ÇõF -
    ùì¢(ùìï |>‚Çõ œÜs1, ùìï |>‚Çõ œÜs2) ‚Ä¢ [ofCrAnListF œÜs2, [ofCrAnListF œÜs3, ofCrAnListF œÜs1]‚ÇõF]‚ÇõF) := by
  repeat rw [superCommuteF_ofCrAnListF_ofCrAnListF]
  simp only [instCommGroup, map_sub, map_smul, neg_smul]
  repeat rw [superCommuteF_ofCrAnListF_ofCrAnListF]
  simp only [instCommGroup.eq_1, ofList_append_eq_mul, List.append_assoc]
  by_cases h1 : (ùìï |>‚Çõ œÜs1) = bosonic <;>
    by_cases h2 : (ùìï |>‚Çõ œÜs2) = bosonic <;>
    by_cases h3 : (ùìï |>‚Çõ œÜs3) = bosonic
  ¬∑ simp only [h1, h2, h3, mul_self, bosonic_exchangeSign, one_smul, exchangeSign_bosonic, neg_sub]
    abel
  ¬∑ simp only [h1, h2, bosonic_exchangeSign, one_smul, mul_bosonic, mul_self, map_one,
    exchangeSign_bosonic, neg_sub]
    abel
  ¬∑ simp only [h1, h3, mul_bosonic, bosonic_exchangeSign, one_smul, exchangeSign_bosonic, neg_sub,
    mul_self, map_one]
    abel
  ¬∑ simp only [neq_bosonic_iff_eq_fermionic] at h1 h2 h3
    simp only [h1, h2, h3, mul_self, bosonic_exchangeSign, one_smul,
      fermionic_exchangeSign_fermionic, neg_smul, neg_sub, bosonic_mul_fermionic, sub_neg_eq_add,
      mul_bosonic, smul_add, exchangeSign_bosonic]
    abel
  ¬∑ simp only [neq_bosonic_iff_eq_fermionic] at h1 h2 h3
    simp only [h1, h2, h3, mul_self, map_one, one_smul, exchangeSign_bosonic, mul_bosonic,
      bosonic_exchangeSign, bosonic_mul_fermionic, neg_sub]
    abel
  ¬∑ simp only [neq_bosonic_iff_eq_fermionic] at h1 h2 h3
    simp only [h1, h2, h3, bosonic_mul_fermionic, fermionic_exchangeSign_fermionic, neg_smul,
      one_smul, sub_neg_eq_add, bosonic_exchangeSign, mul_bosonic, smul_add, exchangeSign_bosonic,
      neg_sub, mul_self]
    abel
  ¬∑ simp only [neq_bosonic_iff_eq_fermionic] at h1 h2 h3
    simp only [h1, h2, h3, mul_bosonic, fermionic_exchangeSign_fermionic, neg_smul, one_smul,
      sub_neg_eq_add, exchangeSign_bosonic, bosonic_mul_fermionic, smul_add, mul_self,
      bosonic_exchangeSign, neg_sub]
    abel
  ¬∑ simp only [neq_bosonic_iff_eq_fermionic] at h1 h2 h3
    simp only [h1, h2, h3, mul_self, map_one, one_smul, fermionic_exchangeSign_fermionic, neg_smul,
      neg_sub]
    abel

/-!

## Interaction with grading.

-/

lemma superCommuteF_grade {a b : ùìï.FieldOpFreeAlgebra} {f1 f2 : FieldStatistic}
    (ha : a ‚àà statisticSubmodule f1) (hb : b ‚àà statisticSubmodule f2) :
    [a, b]‚ÇõF ‚àà statisticSubmodule (f1 + f2) := by
  let p (a2 : ùìï.FieldOpFreeAlgebra) (hx : a2 ‚àà statisticSubmodule f2) : Prop :=
    [a, a2]‚ÇõF ‚àà statisticSubmodule (f1 + f2)
  change p b hb
  apply Submodule.span_induction (p := p)
  ¬∑ intro x hx
    obtain ‚ü®œÜs, rfl, hœÜs‚ü© := hx
    simp only [add_eq_mul, instCommGroup, p]
    let p (a2 : ùìï.FieldOpFreeAlgebra) (hx : a2 ‚àà statisticSubmodule f1) : Prop :=
        [a2, ofCrAnListF œÜs]‚ÇõF ‚àà statisticSubmodule (f1 + f2)
    change p a ha
    apply Submodule.span_induction (p := p)
    ¬∑ intro x hx
      obtain ‚ü®œÜs', rfl, hœÜs'‚ü© := hx
      simp only [add_eq_mul, instCommGroup, p]
      rw [superCommuteF_ofCrAnListF_ofCrAnListF]
      apply Submodule.sub_mem _
      ¬∑ apply ofCrAnListF_mem_statisticSubmodule_of
        rw [ofList_append_eq_mul, hœÜs, hœÜs']
      ¬∑ apply Submodule.smul_mem
        apply ofCrAnListF_mem_statisticSubmodule_of
        rw [ofList_append_eq_mul, hœÜs, hœÜs']
        rw [mul_comm]
    ¬∑ simp [p]
    ¬∑ intro x y hx hy hp1 hp2
      simp only [add_eq_mul, instCommGroup, map_add, LinearMap.add_apply, p]
      exact Submodule.add_mem _ hp1 hp2
    ¬∑ intro c x hx hp1
      simp only [add_eq_mul, instCommGroup, map_smul, LinearMap.smul_apply, p]
      exact Submodule.smul_mem _ c hp1
    ¬∑ exact ha
  ¬∑ simp [p]
  ¬∑ intro x y hx hy hp1 hp2
    simp only [add_eq_mul, instCommGroup, map_add, p]
    exact Submodule.add_mem _ hp1 hp2
  ¬∑ intro c x hx hp1
    simp only [add_eq_mul, instCommGroup, map_smul, p]
    exact Submodule.smul_mem _ c hp1
  ¬∑ exact hb

lemma superCommuteF_bosonic_bosonic {a b : ùìï.FieldOpFreeAlgebra}
    (ha : a ‚àà statisticSubmodule bosonic) (hb : b ‚àà statisticSubmodule bosonic) :
    [a, b]‚ÇõF = a * b - b * a := by
  let p (a2 : ùìï.FieldOpFreeAlgebra) (hx : a2 ‚àà statisticSubmodule bosonic) : Prop :=
    [a, a2]‚ÇõF = a * a2 - a2 * a
  change p b hb
  apply Submodule.span_induction (p := p)
  ¬∑ intro x hx
    obtain ‚ü®œÜs, rfl, hœÜs‚ü© := hx
    let p (a2 : ùìï.FieldOpFreeAlgebra) (hx : a2 ‚àà statisticSubmodule bosonic) : Prop :=
        [a2, ofCrAnListF œÜs]‚ÇõF = a2 * ofCrAnListF œÜs - ofCrAnListF œÜs * a2
    change p a ha
    apply Submodule.span_induction (p := p)
    ¬∑ intro x hx
      obtain ‚ü®œÜs', rfl, hœÜs'‚ü© := hx
      simp only [p]
      rw [superCommuteF_ofCrAnListF_ofCrAnListF]
      simp [hœÜs, ofCrAnListF_append]
    ¬∑ simp [p]
    ¬∑ intro x y hx hy hp1 hp2
      simp_all only [p, map_add, LinearMap.add_apply, add_mul, mul_add]
      abel
    ¬∑ intro c x hx hp1
      simp_all [p, smul_sub]
    ¬∑ exact ha
  ¬∑ simp [p]
  ¬∑ intro x y hx hy hp1 hp2
    simp_all only [p, map_add, mul_add, add_mul]
    abel
  ¬∑ intro c x hx hp1
    simp_all [p, smul_sub]
  ¬∑ exact hb

lemma superCommuteF_bosonic_fermionic {a b : ùìï.FieldOpFreeAlgebra}
    (ha : a ‚àà statisticSubmodule bosonic) (hb : b ‚àà statisticSubmodule fermionic) :
    [a, b]‚ÇõF = a * b - b * a := by
  let p (a2 : ùìï.FieldOpFreeAlgebra) (hx : a2 ‚àà statisticSubmodule fermionic) : Prop :=
    [a, a2]‚ÇõF = a * a2 - a2 * a
  change p b hb
  apply Submodule.span_induction (p := p)
  ¬∑ intro x hx
    obtain ‚ü®œÜs, rfl, hœÜs‚ü© := hx
    let p (a2 : ùìï.FieldOpFreeAlgebra) (hx : a2 ‚àà statisticSubmodule bosonic) : Prop :=
        [a2, ofCrAnListF œÜs]‚ÇõF = a2 * ofCrAnListF œÜs - ofCrAnListF œÜs * a2
    change p a ha
    apply Submodule.span_induction (p := p)
    ¬∑ intro x hx
      obtain ‚ü®œÜs', rfl, hœÜs'‚ü© := hx
      simp only [p]
      rw [superCommuteF_ofCrAnListF_ofCrAnListF]
      simp [hœÜs, hœÜs', ofCrAnListF_append]
    ¬∑ simp [p]
    ¬∑ intro x y hx hy hp1 hp2
      simp_all only [p, map_add, LinearMap.add_apply, add_mul, mul_add]
      abel
    ¬∑ intro c x hx hp1
      simp_all [p, smul_sub]
    ¬∑ exact ha
  ¬∑ simp [p]
  ¬∑ intro x y hx hy hp1 hp2
    simp_all only [p, map_add, mul_add, add_mul]
    abel
  ¬∑ intro c x hx hp1
    simp_all [p, smul_sub]
  ¬∑ exact hb

lemma superCommuteF_fermionic_bonsonic {a b : ùìï.FieldOpFreeAlgebra}
    (ha : a ‚àà statisticSubmodule fermionic) (hb : b ‚àà statisticSubmodule bosonic) :
    [a, b]‚ÇõF = a * b - b * a := by
  let p (a2 : ùìï.FieldOpFreeAlgebra) (hx : a2 ‚àà statisticSubmodule bosonic) : Prop :=
    [a, a2]‚ÇõF = a * a2 - a2 * a
  change p b hb
  apply Submodule.span_induction (p := p)
  ¬∑ intro x hx
    obtain ‚ü®œÜs, rfl, hœÜs‚ü© := hx
    let p (a2 : ùìï.FieldOpFreeAlgebra) (hx : a2 ‚àà statisticSubmodule fermionic) : Prop :=
        [a2, ofCrAnListF œÜs]‚ÇõF = a2 * ofCrAnListF œÜs - ofCrAnListF œÜs * a2
    change p a ha
    apply Submodule.span_induction (p := p)
    ¬∑ intro x hx
      obtain ‚ü®œÜs', rfl, hœÜs'‚ü© := hx
      simp only [p]
      rw [superCommuteF_ofCrAnListF_ofCrAnListF]
      simp [hœÜs, hœÜs', ofCrAnListF_append]
    ¬∑ simp [p]
    ¬∑ intro x y hx hy hp1 hp2
      simp_all only [p, map_add, LinearMap.add_apply, add_mul, mul_add]
      abel
    ¬∑ intro c x hx hp1
      simp_all [p, smul_sub]
    ¬∑ exact ha
  ¬∑ simp [p]
  ¬∑ intro x y hx hy hp1 hp2
    simp_all only [map_add, mul_add, add_mul, p]
    abel
  ¬∑ intro c x hx hp1
    simp_all [p, smul_sub]
  ¬∑ exact hb

lemma superCommuteF_bonsonic {a b : ùìï.FieldOpFreeAlgebra} (hb : b ‚àà statisticSubmodule bosonic) :
    [a, b]‚ÇõF = a * b - b * a := by
  rw [‚Üê bosonicProjF_add_fermionicProjF a]
  simp only [map_add, LinearMap.add_apply]
  rw [superCommuteF_bosonic_bosonic (by simp) hb, superCommuteF_fermionic_bonsonic (by simp) hb]
  simp only [add_mul, mul_add]
  abel

lemma bosonic_superCommuteF {a b : ùìï.FieldOpFreeAlgebra} (ha : a ‚àà statisticSubmodule bosonic) :
    [a, b]‚ÇõF = a * b - b * a := by
  rw [‚Üê bosonicProjF_add_fermionicProjF b]
  simp only [map_add, LinearMap.add_apply]
  rw [superCommuteF_bosonic_bosonic ha (by simp), superCommuteF_bosonic_fermionic ha (by simp)]
  simp only [add_mul, mul_add]
  abel

lemma superCommuteF_bonsonic_symm {a b : ùìï.FieldOpFreeAlgebra}
    (hb : b ‚àà statisticSubmodule bosonic) :
    [a, b]‚ÇõF = - [b, a]‚ÇõF := by
  rw [bosonic_superCommuteF hb, superCommuteF_bonsonic hb]
  simp

lemma bonsonic_superCommuteF_symm {a b : ùìï.FieldOpFreeAlgebra}
    (ha : a ‚àà statisticSubmodule bosonic) :
    [a, b]‚ÇõF = - [b, a]‚ÇõF := by
  rw [bosonic_superCommuteF ha, superCommuteF_bonsonic ha]
  simp

lemma superCommuteF_fermionic_fermionic {a b : ùìï.FieldOpFreeAlgebra}
    (ha : a ‚àà statisticSubmodule fermionic) (hb : b ‚àà statisticSubmodule fermionic) :
    [a, b]‚ÇõF = a * b + b * a := by
  let p (a2 : ùìï.FieldOpFreeAlgebra) (hx : a2 ‚àà statisticSubmodule fermionic) : Prop :=
    [a, a2]‚ÇõF = a * a2 + a2 * a
  change p b hb
  apply Submodule.span_induction (p := p)
  ¬∑ intro x hx
    obtain ‚ü®œÜs, rfl, hœÜs‚ü© := hx
    let p (a2 : ùìï.FieldOpFreeAlgebra) (hx : a2 ‚àà statisticSubmodule fermionic) : Prop :=
        [a2, ofCrAnListF œÜs]‚ÇõF = a2 * ofCrAnListF œÜs + ofCrAnListF œÜs * a2
    change p a ha
    apply Submodule.span_induction (p := p)
    ¬∑ intro x hx
      obtain ‚ü®œÜs', rfl, hœÜs'‚ü© := hx
      simp only [p]
      rw [superCommuteF_ofCrAnListF_ofCrAnListF]
      simp [hœÜs, hœÜs', ofCrAnListF_append]
    ¬∑ simp [p]
    ¬∑ intro x y hx hy hp1 hp2
      simp_all only [p, map_add, LinearMap.add_apply, add_mul, mul_add]
      abel
    ¬∑ intro c x hx hp1
      simp_all [p, smul_sub]
    ¬∑ exact ha
  ¬∑ simp [p]
  ¬∑ intro x y hx hy hp1 hp2
    simp_all only [map_add, mul_add, add_mul, p]
    abel
  ¬∑ intro c x hx hp1
    simp_all [p, smul_sub]
  ¬∑ exact hb

lemma superCommuteF_fermionic_fermionic_symm {a b : ùìï.FieldOpFreeAlgebra}
    (ha : a ‚àà statisticSubmodule fermionic) (hb : b ‚àà statisticSubmodule fermionic) :
    [a, b]‚ÇõF = [b, a]‚ÇõF := by
  rw [superCommuteF_fermionic_fermionic ha hb]
  rw [superCommuteF_fermionic_fermionic hb ha]
  abel

lemma superCommuteF_expand_bosonicProjF_fermionicProjF (a b : ùìï.FieldOpFreeAlgebra) :
    [a, b]‚ÇõF = bosonicProjF a * bosonicProjF b - bosonicProjF b * bosonicProjF a +
    bosonicProjF a * fermionicProjF b - fermionicProjF b * bosonicProjF a +
    fermionicProjF a * bosonicProjF b - bosonicProjF b * fermionicProjF a +
    fermionicProjF a * fermionicProjF b + fermionicProjF b * fermionicProjF a := by
  conv_lhs => rw [‚Üê bosonicProjF_add_fermionicProjF a, ‚Üê bosonicProjF_add_fermionicProjF b]
  simp only [map_add, LinearMap.add_apply]
  rw [superCommuteF_bonsonic (by simp),
      superCommuteF_fermionic_bonsonic (by simp) (by simp),
      superCommuteF_bosonic_fermionic (by simp) (by simp),
      superCommuteF_fermionic_fermionic (by simp) (by simp)]
  abel

lemma superCommuteF_ofCrAnListF_ofCrAnListF_bosonic_or_fermionic (œÜs œÜs' : List ùìï.CrAnFieldOp) :
    [ofCrAnListF œÜs, ofCrAnListF œÜs']‚ÇõF ‚àà statisticSubmodule bosonic ‚à®
    [ofCrAnListF œÜs, ofCrAnListF œÜs']‚ÇõF ‚àà statisticSubmodule fermionic := by
  by_cases h1 : (ùìï |>‚Çõ œÜs) = bosonic <;> by_cases h2 : (ùìï |>‚Çõ œÜs') = bosonic
  ¬∑ left
    have h : bosonic = bosonic + bosonic := by
      simp only [add_eq_mul, instCommGroup, mul_self]
      rfl
    rw [h]
    apply superCommuteF_grade
    apply ofCrAnListF_mem_statisticSubmodule_of _ _ h1
    apply ofCrAnListF_mem_statisticSubmodule_of _ _ h2
  ¬∑ right
    have h : fermionic = bosonic + fermionic := by
      simp only [add_eq_mul, instCommGroup, mul_self]
      rfl
    rw [h]
    apply superCommuteF_grade
    apply ofCrAnListF_mem_statisticSubmodule_of _ _ h1
    apply ofCrAnListF_mem_statisticSubmodule_of _ _ (by simpa using h2)
  ¬∑ right
    have h : fermionic = fermionic + bosonic := by
      simp only [add_eq_mul, instCommGroup, mul_self]
      rfl
    rw [h]
    apply superCommuteF_grade
    apply ofCrAnListF_mem_statisticSubmodule_of _ _ (by simpa using h1)
    apply ofCrAnListF_mem_statisticSubmodule_of _ _ h2
  ¬∑ left
    have h : bosonic = fermionic + fermionic := by
      simp only [add_eq_mul, instCommGroup, mul_self]
      rfl
    rw [h]
    apply superCommuteF_grade
    apply ofCrAnListF_mem_statisticSubmodule_of _ _ (by simpa using h1)
    apply ofCrAnListF_mem_statisticSubmodule_of _ _ (by simpa using h2)

lemma superCommuteF_ofCrAnOpF_ofCrAnOpF_bosonic_or_fermionic (œÜ œÜ' : ùìï.CrAnFieldOp) :
    [ofCrAnOpF œÜ, ofCrAnOpF œÜ']‚ÇõF ‚àà statisticSubmodule bosonic ‚à®
    [ofCrAnOpF œÜ, ofCrAnOpF œÜ']‚ÇõF ‚àà statisticSubmodule fermionic := by
  rw [‚Üê ofCrAnListF_singleton, ‚Üê ofCrAnListF_singleton]
  exact superCommuteF_ofCrAnListF_ofCrAnListF_bosonic_or_fermionic [œÜ] [œÜ']

lemma superCommuteF_superCommuteF_ofCrAnOpF_bosonic_or_fermionic (œÜ1 œÜ2 œÜ3 : ùìï.CrAnFieldOp) :
    [ofCrAnOpF œÜ1, [ofCrAnOpF œÜ2, ofCrAnOpF œÜ3]‚ÇõF]‚ÇõF ‚àà statisticSubmodule bosonic ‚à®
    [ofCrAnOpF œÜ1, [ofCrAnOpF œÜ2, ofCrAnOpF œÜ3]‚ÇõF]‚ÇõF ‚àà statisticSubmodule fermionic := by
  rcases superCommuteF_ofCrAnOpF_ofCrAnOpF_bosonic_or_fermionic œÜ2 œÜ3 with hs | hs
    <;> rcases ofCrAnOpF_bosonic_or_fermionic œÜ1 with h1 | h1
  ¬∑ left
    have h : bosonic = bosonic + bosonic := by
      simp only [add_eq_mul, instCommGroup, mul_self]
      rfl
    rw [h]
    apply superCommuteF_grade h1 hs
  ¬∑ right
    have h : fermionic = fermionic + bosonic := by
      simp only [add_eq_mul, instCommGroup, mul_self]
      rfl
    rw [h]
    apply superCommuteF_grade h1 hs
  ¬∑ right
    have h : fermionic = bosonic + fermionic := by
      simp only [add_eq_mul, instCommGroup, mul_self]
      rfl
    rw [h]
    apply superCommuteF_grade h1 hs
  ¬∑ left
    have h : bosonic = fermionic + fermionic := by
      simp only [add_eq_mul, instCommGroup, mul_self]
      rfl
    rw [h]
    apply superCommuteF_grade h1 hs

lemma superCommuteF_bosonic_ofCrAnListF_eq_sum (a : ùìï.FieldOpFreeAlgebra) (œÜs : List ùìï.CrAnFieldOp)
    (ha : a ‚àà statisticSubmodule bosonic) :
    [a, ofCrAnListF œÜs]‚ÇõF = ‚àë (n : Fin œÜs.length),
      ofCrAnListF (œÜs.take n) * [a, ofCrAnOpF (œÜs.get n)]‚ÇõF *
      ofCrAnListF (œÜs.drop (n + 1)) := by
  let p (a : ùìï.FieldOpFreeAlgebra) (ha : a ‚àà statisticSubmodule bosonic) : Prop :=
      [a, ofCrAnListF œÜs]‚ÇõF = ‚àë (n : Fin œÜs.length),
      ofCrAnListF (œÜs.take n) * [a, ofCrAnOpF (œÜs.get n)]‚ÇõF *
      ofCrAnListF (œÜs.drop (n + 1))
  change p a ha
  apply Submodule.span_induction (p := p)
  ¬∑ intro a ha
    obtain ‚ü®œÜs, rfl, hœÜs‚ü© := ha
    simp only [List.get_eq_getElem, p]
    rw [superCommuteF_ofCrAnListF_ofCrAnListF_eq_sum]
    congr
    funext n
    simp [hœÜs]
  ¬∑ simp [p]
  ¬∑ intro x y hx hy hpx hpy
    simp_all only [List.get_eq_getElem, map_add, LinearMap.add_apply, p]
    rw [‚Üê Finset.sum_add_distrib]
    congr
    funext n
    simp [mul_add, add_mul]
  ¬∑ intro c x hx hpx
    simp_all [p, Finset.smul_sum]
  ¬∑ exact ha

lemma superCommuteF_fermionic_ofCrAnListF_eq_sum (a : ùìï.FieldOpFreeAlgebra)
    (œÜs : List ùìï.CrAnFieldOp) (ha : a ‚àà statisticSubmodule fermionic) :
    [a, ofCrAnListF œÜs]‚ÇõF = ‚àë (n : Fin œÜs.length), ùì¢(fermionic, ùìï |>‚Çõ œÜs.take n) ‚Ä¢
      ofCrAnListF (œÜs.take n) * [a, ofCrAnOpF (œÜs.get n)]‚ÇõF *
      ofCrAnListF (œÜs.drop (n + 1)) := by
  let p (a : ùìï.FieldOpFreeAlgebra) (ha : a ‚àà statisticSubmodule fermionic) : Prop :=
      [a, ofCrAnListF œÜs]‚ÇõF = ‚àë (n : Fin œÜs.length), ùì¢(fermionic, ùìï |>‚Çõ œÜs.take n) ‚Ä¢
      ofCrAnListF (œÜs.take n) * [a, ofCrAnOpF (œÜs.get n)]‚ÇõF *
      ofCrAnListF (œÜs.drop (n + 1))
  change p a ha
  apply Submodule.span_induction (p := p)
  ¬∑ intro a ha
    obtain ‚ü®œÜs, rfl, hœÜs‚ü© := ha
    simp only [instCommGroup, List.get_eq_getElem, Algebra.smul_mul_assoc, p]
    rw [superCommuteF_ofCrAnListF_ofCrAnListF_eq_sum]
    congr
    funext n
    simp [hœÜs]
  ¬∑ simp [p]
  ¬∑ intro x y hx hy hpx hpy
    simp_all only [p, instCommGroup, List.get_eq_getElem, Algebra.smul_mul_assoc, map_add,
      LinearMap.add_apply]
    rw [‚Üê Finset.sum_add_distrib]
    congr
    funext n
    simp [mul_add, add_mul]
  ¬∑ intro c x hx hpx
    simp_all only [p, instCommGroup, List.get_eq_getElem, Algebra.smul_mul_assoc, map_smul,
      LinearMap.smul_apply, Finset.smul_sum, Algebra.mul_smul_comm]
    congr
    funext x
    simp [smul_smul, mul_comm]
  ¬∑ exact ha

lemma statistic_neq_of_superCommuteF_fermionic {œÜs œÜs' : List ùìï.CrAnFieldOp}
    (h : [ofCrAnListF œÜs, ofCrAnListF œÜs']‚ÇõF ‚àà statisticSubmodule fermionic) :
    (ùìï |>‚Çõ œÜs) ‚â† (ùìï |>‚Çõ œÜs') ‚à® [ofCrAnListF œÜs, ofCrAnListF œÜs']‚ÇõF = 0 := by
  by_cases h0 : [ofCrAnListF œÜs, ofCrAnListF œÜs']‚ÇõF = 0
  ¬∑ simp [h0]
  simp only [ne_eq, h0, or_false]
  by_contra hn
  refine h0 (eq_zero_of_bosonic_and_fermionic ?_ h)
  by_cases hc : (ùìï |>‚Çõ œÜs) = bosonic
  ¬∑ have h1 : bosonic = bosonic + bosonic := by
      simp only [add_eq_mul, instCommGroup, mul_self]
      rfl
    rw [h1]
    apply superCommuteF_grade
    apply ofCrAnListF_mem_statisticSubmodule_of _ _ hc
    apply ofCrAnListF_mem_statisticSubmodule_of _ _
    rw [‚Üê hn, hc]
  ¬∑ have h1 : bosonic = fermionic + fermionic := by
      simp only [add_eq_mul, instCommGroup, mul_self]
      rfl
    rw [h1]
    apply superCommuteF_grade
    apply ofCrAnListF_mem_statisticSubmodule_of _ _
    simpa using hc
    apply ofCrAnListF_mem_statisticSubmodule_of _ _
    rw [‚Üê hn]
    simpa using hc

end FieldOpFreeAlgebra

end FieldSpecification
