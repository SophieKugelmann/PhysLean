/-
Copyright (c) 2025 Joseph Tooby-Smith. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Joseph Tooby-Smith
-/
import PhysLean.Mathematics.Distribution.Function.InvPowMeasure
import Mathlib.Tactic.Cases
/-!

## Bounded functions for distributions

In this module we define the property `IsDistBounded f` for a function `f`.
It says that `f` is bounded by a finite sum of terms of the form `c * ‚Äñx + g‚Äñ ^ p` for
constants `c`, `g` and `-d ‚â§ p ` where `d` is the dimension of the space minus 1.

We prove a number of properties of these functions, in particular that they
are integrable when multiplied by a Schwartz map. This allows us to define distributions
from such functions.

-/
open SchwartzMap NNReal
noncomputable section

variable (ùïú : Type) {E F F' : Type} [RCLike ùïú] [NormedAddCommGroup E] [NormedAddCommGroup F]
  [NormedAddCommGroup F']

namespace Distribution

variable [NormedSpace ‚Ñù E]

open MeasureTheory

/-!

## IsBounded

-/

/-- The boundedness condition on a function ` EuclideanSpace ‚Ñù (Fin dm1.succ) ‚Üí F`
  for it to form a distribution. -/
@[fun_prop]
def IsDistBounded {dm1 : ‚Ñï} (f : EuclideanSpace ‚Ñù (Fin dm1.succ) ‚Üí F) : Prop :=
    ‚àÉ n, ‚àÉ c : Fin n ‚Üí ‚Ñù, ‚àÉ g : Fin n ‚Üí EuclideanSpace ‚Ñù (Fin dm1.succ),
    ‚àÉ p : Fin n ‚Üí ‚Ñ§,
    (‚àÄ i, 0 ‚â§ c i) ‚àß
    (‚àÄ i, -dm1 ‚â§ p i) ‚àß
    ‚àÄ x, ‚Äñf x‚Äñ ‚â§ ‚àë i, c i * ‚Äñx + g i‚Äñ ^ p i

@[fun_prop]
lemma IsDistBounded.add {dm1 : ‚Ñï} {f g : EuclideanSpace ‚Ñù (Fin dm1.succ) ‚Üí F}
    (hf : IsDistBounded f) (hg : IsDistBounded g) : IsDistBounded (f + g) := by
  rcases hf with ‚ü®n1, c1, g1, p1, c1_nonneg, p1_bound, bound1‚ü©
  rcases hg with ‚ü®n2, c2, g2, p2, c2_nonneg, p2_bound, bound2‚ü©
  refine ‚ü®n1 + n2, Fin.append c1 c2, Fin.append g1 g2, Fin.append p1 p2, ?_, ?_, ?_‚ü©
  ¬∑ intro i
    obtain ‚ü®i, rfl‚ü© := finSumFinEquiv.surjective i
    match i with
    | .inl i =>
      simp only [finSumFinEquiv_apply_left, Fin.append_left, ge_iff_le]
      exact c1_nonneg i
    | .inr i =>
      simp only [finSumFinEquiv_apply_right, Fin.append_right, ge_iff_le]
      exact c2_nonneg i
  ¬∑ intro i
    obtain ‚ü®i, rfl‚ü© := finSumFinEquiv.surjective i
    match i with
    | .inl i =>
      simp only [finSumFinEquiv_apply_left, Fin.append_left, ge_iff_le]
      exact p1_bound i
    | .inr i =>
      simp only [finSumFinEquiv_apply_right, Fin.append_right, ge_iff_le]
      exact p2_bound i
  ¬∑ intro x
    apply (norm_add_le _ _).trans
    apply (add_le_add (bound1 x) (bound2 x)).trans
    apply le_of_eq
    rw [‚Üê finSumFinEquiv.sum_comp]
    simp

@[fun_prop]
lemma IsDistBounded.const_smul {dm1 : ‚Ñï} [NormedSpace ‚Ñù F] {f : EuclideanSpace ‚Ñù (Fin dm1.succ) ‚Üí F}
    (hf : IsDistBounded f) (c : ‚Ñù) : IsDistBounded (c ‚Ä¢ f) := by
  rcases hf with ‚ü®n1, c1, g1, p1, c1_nonneg, p1_bound, bound1‚ü©
  refine ‚ü®n1, ‚Äñc‚Äñ ‚Ä¢ c1, g1, p1, ?_, p1_bound, ?_‚ü©
  ¬∑ intro i
    simp only [Real.norm_eq_abs, Pi.smul_apply, smul_eq_mul]
    have hi := c1_nonneg i
    positivity
  ¬∑ intro x
    simp [norm_smul]
    conv_rhs => enter [2, x]; rw [mul_assoc]
    rw [‚Üê Finset.mul_sum]
    refine mul_le_mul (by rfl) (bound1 x) ?_ ?_
    ¬∑ exact norm_nonneg (f x)
    ¬∑ exact abs_nonneg c

lemma IsDistBounded.pi_comp {dm1 n : ‚Ñï}
    {f : EuclideanSpace ‚Ñù (Fin dm1.succ) ‚Üí EuclideanSpace ‚Ñù (Fin n)}
    (hf : IsDistBounded f) (j : Fin n) : IsDistBounded (fun x => f x j) := by
  rcases hf with ‚ü®n1, c1, g1, p1, c1_nonneg, p1_bound, bound1‚ü©
  refine ‚ü®n1, c1, g1, p1, c1_nonneg, p1_bound, ?_‚ü©
  intro x
  apply le_trans ?_ (bound1 x)
  simp only [Real.norm_eq_abs]
  rw [@PiLp.norm_eq_of_L2]
  refine Real.abs_le_sqrt ?_
  trans ‚àë i ‚àà {j}, ‚Äñ(f x) i‚Äñ ^ 2
  ¬∑ simp
  apply Finset.sum_le_univ_sum_of_nonneg
  intro y
  exact sq_nonneg ‚Äñf x y‚Äñ

lemma IsDistBounded.comp_add_right {dm1 : ‚Ñï} {f : EuclideanSpace ‚Ñù (Fin dm1.succ) ‚Üí F}
    (hf : IsDistBounded f) (c : EuclideanSpace ‚Ñù (Fin dm1.succ)) :
    IsDistBounded (fun x => f (x + c)) := by
  rcases hf with ‚ü®n1, c1, g1, p1, c1_nonneg, p1_bound, bound1‚ü©
  refine ‚ü®n1, c1, fun i => g1 i + c, p1, c1_nonneg, p1_bound, ?_‚ü©
  intro x
  apply (bound1 (x + c)).trans
  apply le_of_eq
  simp only [Nat.succ_eq_add_one]
  congr 1
  funext x
  congr 3
  module

@[fun_prop]
lemma IsDistBounded.const_mul_fun {dm1 : ‚Ñï}
    {f : EuclideanSpace ‚Ñù (Fin dm1.succ) ‚Üí ‚Ñù}
    (hf : IsDistBounded f) (c : ‚Ñù) : IsDistBounded (fun x => c * f x) := by
  convert hf.const_smul c using 1

lemma IsDistBounded.congr {dm1 : ‚Ñï} {f : EuclideanSpace ‚Ñù (Fin dm1.succ) ‚Üí F}
    {g : EuclideanSpace ‚Ñù (Fin dm1.succ) ‚Üí F'}
    (hf : IsDistBounded f) (hfg : ‚àÄ x, ‚Äñg x‚Äñ = ‚Äñf x‚Äñ) : IsDistBounded g := by
  rcases hf with ‚ü®n1, c1, g1, p1, c1_nonneg, p1_bound, bound1‚ü©
  refine ‚ü®n1, c1, g1, p1, c1_nonneg, p1_bound, ?_‚ü©
  intro x
  rw [hfg x]
  exact bound1 x

lemma IsDistBounded.mono {dm1 : ‚Ñï} {f : EuclideanSpace ‚Ñù (Fin dm1.succ) ‚Üí F}
    {g : EuclideanSpace ‚Ñù (Fin dm1.succ) ‚Üí F'}
    (hf : IsDistBounded f) (hfg : ‚àÄ x, ‚Äñg x‚Äñ ‚â§ ‚Äñf x‚Äñ) : IsDistBounded g := by
  rcases hf with ‚ü®n1, c1, g1, p1, c1_nonneg, p1_bound, bound1‚ü©
  refine ‚ü®n1, c1, g1, p1, c1_nonneg, p1_bound, ?_‚ü©
  intro x
  exact (hfg x).trans (bound1 x)

open InnerProductSpace
@[fun_prop]
lemma IsDistBounded.inner_left {dm1 n : ‚Ñï}
    {f : EuclideanSpace ‚Ñù (Fin dm1.succ) ‚Üí EuclideanSpace ‚Ñù (Fin n) }
    (hf : IsDistBounded f) (y : EuclideanSpace ‚Ñù (Fin n)) :
    IsDistBounded (fun x => ‚ü™f x, y‚ü´_‚Ñù) := by
  rcases hf with ‚ü®n1, c1, g1, p1, c1_nonneg, p1_bound, bound1‚ü©
  refine ‚ü®n1, fun i => ‚Äñy‚Äñ * c1 i, g1, p1, ?_, p1_bound, ?_‚ü©
  ¬∑ intro i
    simp only
    have hi := c1_nonneg i
    positivity
  ¬∑ intro x
    apply (norm_inner_le_norm (f x) y).trans
    rw [mul_comm]
    simp only [Nat.succ_eq_add_one]
    conv_rhs => enter [2, i]; rw [mul_assoc]
    rw [‚Üê Finset.mul_sum]
    refine mul_le_mul (by rfl) (bound1 x) ?_ ?_
    ¬∑ exact norm_nonneg (f x)
    ¬∑ exact norm_nonneg y

/-!

## Specific cases

-/

TODO "LSLHW" "The proof `IsDistBounded.pow` needs golfing."

@[fun_prop]
lemma IsDistBounded.const {dm1 : ‚Ñï} (f : F) :
    IsDistBounded (dm1 := dm1) (fun _ : EuclideanSpace ‚Ñù (Fin dm1.succ) => f) := by
  use 1, fun _ => ‚Äñf‚Äñ, fun _ => 0, fun _ => 0
  simp

@[fun_prop]
lemma IsDistBounded.pow {dm1 : ‚Ñï} (n : ‚Ñ§) (hn : - dm1 ‚â§ n) :
    IsDistBounded (dm1 := dm1) (fun x => ‚Äñx‚Äñ ^ n) := by
  refine ‚ü®1, fun _ => 1, fun _ => 0, fun _ => n, ?_, ?_, ?_‚ü©
  ¬∑ simp
  ¬∑ simp
    exact hn
  ¬∑ intro x
    simp

@[fun_prop]
lemma IsDistBounded.pow_shift {dm1 : ‚Ñï} (n : ‚Ñ§)
    (g : EuclideanSpace ‚Ñù (Fin dm1.succ)) (hn : - dm1 ‚â§ n) :
    IsDistBounded (dm1 := dm1) (fun x => ‚Äñx - g‚Äñ ^ n) := by
  refine ‚ü®1, fun _ => 1, fun _ => (- g), fun _ => n, ?_, ?_, ?_‚ü©
  ¬∑ simp
  ¬∑ simp
    exact hn
  ¬∑ intro x
    simp
    rfl

@[fun_prop]
lemma IsDistBounded.inv {n : ‚Ñï} :
    IsDistBounded (dm1 := n.succ) (fun x => ‚Äñx‚Äñ‚Åª¬π) := by
  convert IsDistBounded.pow (dm1 := n.succ) (-1) (by simp) using 1
  ext1 x
  simp

/-!

## Integrability

-/

lemma schwartzMap_mul_pow_integrable {dm1 : ‚Ñï} (Œ∑ : ùì¢(EuclideanSpace ‚Ñù (Fin dm1.succ), ‚Ñù))
    (p : ‚Ñ§) (hp : - (dm1 : ‚Ñ§) ‚â§ p) :
    Integrable (fun x => ‚ÄñŒ∑ x‚Äñ * ‚Äñx‚Äñ ^ p) volume := by
  by_cases hp : p = 0
  ¬∑ subst hp
    simp only [Nat.succ_eq_add_one, zpow_zero, mul_one]
    apply Integrable.norm
    exact Œ∑.integrable
  suffices h1 : Integrable (fun x => ‚ÄñŒ∑ x‚Äñ * ‚Äñx‚Äñ ^ (p + dm1)) (invPowMeasure (dm1 := dm1)) by
    rw [invPowMeasure] at h1
    erw [integrable_withDensity_iff_integrable_smul‚ÇÄ (by fun_prop)] at h1
    convert h1 using 1
    funext x
    simp only [Nat.succ_eq_add_one, Real.norm_eq_abs, one_div]
    rw [Real.toNNReal_of_nonneg, NNReal.smul_def]
    simp only [inv_nonneg, norm_nonneg, pow_nonneg, coe_mk, smul_eq_mul]
    ring_nf
    rw [mul_assoc]
    congr
    have hx : 0 ‚â§ ‚Äñx‚Äñ := norm_nonneg x
    generalize ‚Äñx‚Äñ = r at *
    by_cases hr : r = 0
    ¬∑ subst hr
      simp only [inv_zero]
      rw [zero_pow_eq, zero_zpow_eq, zero_zpow_eq]
      split_ifs <;> simp
      any_goals omega
    ¬∑ simp only [inv_pow]
      field_simp
      rw [zpow_add‚ÇÄ hr]
      simp
    ¬∑ simp
  convert integrable_pow_mul_iteratedFDeriv invPowMeasure Œ∑ (p + dm1).toNat 0 using 1
  funext x
  simp only [Nat.succ_eq_add_one, Real.norm_eq_abs, norm_iteratedFDeriv_zero]
  rw [mul_comm]
  congr 1
  rw [‚Üê zpow_natCast]
  congr
  refine Int.eq_natCast_toNat.mpr ?_
  omega

lemma IsDistBounded.schwartzMap_mul_integrable_norm {dm1 : ‚Ñï}
    {Œ∑ : ùì¢(EuclideanSpace ‚Ñù (Fin dm1.succ), ‚Ñù)}
    {f : EuclideanSpace ‚Ñù (Fin dm1.succ) ‚Üí F}
    (hf : IsDistBounded f)
    (hae: AEStronglyMeasurable (fun x => f x) volume) :
    Integrable (fun x => ‚ÄñŒ∑ x‚Äñ * ‚Äñf x‚Äñ) volume := by
  rcases hf with ‚ü®n, c, g, p, c_nonneg, p_bound, hbound‚ü©
  apply Integrable.mono' (g := fun x => ‚àë i, ‚ÄñŒ∑ x‚Äñ * (c i * ‚Äñx + g i‚Äñ ^ p i)) _
  ¬∑ fun_prop
  ¬∑ filter_upwards with x
    rw [‚Üê Finset.mul_sum]
    simp
    exact mul_le_mul (by rfl) (hbound x) (norm_nonneg _) (abs_nonneg _)
  ¬∑ apply MeasureTheory.integrable_finset_sum
    intro i _
    conv =>
      enter [1, x]
      rw [‚Üê mul_assoc, mul_comm _ (c i), mul_assoc]
    apply Integrable.const_mul
    suffices h1 : Integrable (fun x => ‚ÄñŒ∑ ((x + g i) - g i)‚Äñ * ‚Äñx + g i‚Äñ ^ p i) volume by
      convert h1 using 1
      simp
    apply MeasureTheory.Integrable.comp_add_right (g := g i)
      (f := fun x => ‚ÄñŒ∑ (x - g i)‚Äñ * ‚Äñx‚Äñ ^ p i)
    let Œ∑' := SchwartzMap.compCLM (ùïú := ‚Ñù)
      (g := fun x => x - g i)
      (by
        apply Function.HasTemperateGrowth.of_fderiv (k := 1) (C := 1 + ‚Äñg i‚Äñ)
        ¬∑ have hx : (fderiv ‚Ñù (fun x => x - g i)) =
              fun _ => ContinuousLinearMap.id ‚Ñù (EuclideanSpace ‚Ñù (Fin (dm1 + 1))) := by
            funext x
            simp only [Nat.succ_eq_add_one]
            erw [fderiv_sub]
            simp only [fderiv_id', fderiv_fun_const, Pi.zero_apply, sub_zero]
            fun_prop
            fun_prop
          rw [hx]
          exact
            Function.HasTemperateGrowth.const
              (ContinuousLinearMap.id ‚Ñù (EuclideanSpace ‚Ñù (Fin (dm1 + 1))))
        ¬∑ fun_prop
        ¬∑ intro x
          simp only [Nat.succ_eq_add_one, pow_one]
          trans ‚Äñx‚Äñ + ‚Äñg i‚Äñ
          ¬∑ apply norm_sub_le
          simp [mul_add, add_mul]
          trans 1 + (‚Äñx‚Äñ + ‚Äñg i‚Äñ)
          ¬∑ simp
          trans (1 + (‚Äñx‚Äñ + ‚Äñg i‚Äñ)) + ‚Äñx‚Äñ * ‚Äñg i‚Äñ
          ¬∑ simp
            positivity
          ring_nf
          rfl) (by
          simp only [Nat.succ_eq_add_one]
          use 1, (1 + ‚Äñg i‚Äñ)
          intro x
          simp only [Nat.succ_eq_add_one, pow_one]
          apply (norm_le_norm_add_norm_sub' x (g i)).trans
          trans 1 + (‚Äñg i‚Äñ + ‚Äñx - g i‚Äñ)
          ¬∑ simp
          trans (1 + (‚Äñg i‚Äñ + ‚Äñx - g i‚Äñ)) + ‚Äñg i‚Äñ * ‚Äñx - g i‚Äñ
          ¬∑ simp
            positivity
          ring_nf
          rfl) Œ∑
    exact schwartzMap_mul_pow_integrable Œ∑' (p i) (p_bound i)

lemma IsDistBounded.schwartzMap_smul_integrable {dm1 : ‚Ñï}
    {Œ∑ : ùì¢(EuclideanSpace ‚Ñù (Fin dm1.succ), ‚Ñù)}
    {f : EuclideanSpace ‚Ñù (Fin dm1.succ) ‚Üí F}
    (hf : IsDistBounded f) [NormedSpace ‚Ñù F]
    (hae: AEStronglyMeasurable (fun x => f x) volume) :
    Integrable (fun x => Œ∑ x ‚Ä¢ f x) volume := by
  rw [‚Üê MeasureTheory.integrable_norm_iff]
  convert hf.schwartzMap_mul_integrable_norm (Œ∑ := Œ∑) hae using 1
  funext x
  simp [norm_smul]
  fun_prop

@[fun_prop]
lemma IsDistBounded.schwartzMap_mul_integrable {dm1 : ‚Ñï} (f : EuclideanSpace ‚Ñù (Fin dm1.succ) ‚Üí ‚Ñù)
    (hf : IsDistBounded f)
    (hae: AEStronglyMeasurable (fun x => f x) volume)
    (Œ∑ : ùì¢(EuclideanSpace ‚Ñù (Fin dm1.succ), ‚Ñù)) :
    Integrable (fun x : EuclideanSpace ‚Ñù (Fin dm1.succ) => Œ∑ x * f x) := by
  convert hf.schwartzMap_smul_integrable (Œ∑ := Œ∑) hae using 1

@[fun_prop]
lemma IsDistBounded.integrable_fderviv_schwartzMap_mul {dm1 : ‚Ñï}
    (f : EuclideanSpace ‚Ñù (Fin dm1.succ) ‚Üí ‚Ñù) (hf : IsDistBounded f)
    (hae: AEStronglyMeasurable (fun x => f x) volume)
    (Œ∑ : ùì¢(EuclideanSpace ‚Ñù (Fin dm1.succ), ‚Ñù)) (y : EuclideanSpace ‚Ñù (Fin dm1.succ)) :
    Integrable (fun x : EuclideanSpace ‚Ñù (Fin dm1.succ) => fderiv ‚Ñù Œ∑ x y * f x) := by
  exact hf.schwartzMap_smul_integrable hae
    (Œ∑ := ((SchwartzMap.evalCLM (ùïú := ‚Ñù) y) ((fderivCLM ‚Ñù) Œ∑)))

/-!

## Integrability of 1/(1 + ‚Äñx‚Äñ)
-/

lemma intergrable_pow {dm1 : ‚Ñï} (p: ‚Ñ§) (r : ‚Ñï) (p_bound : -dm1 ‚â§ p)
    (r_bound : (p + ‚Üëdm1).toNat + (invPowMeasure (dm1 := dm1)).integrablePower ‚â§ r)
    (v : EuclideanSpace ‚Ñù (Fin dm1.succ)) :
    Integrable (fun x => ‚Äñx + v‚Äñ ^ p * ‚Äñ((1 + ‚Äñx‚Äñ) ^ r)‚Åª¬π‚Äñ) volume := by
  let m := (invPowMeasure (dm1 := dm1)).integrablePower
  have h0 (q : ‚Ñï) : Integrable (fun x => ‚Äñx‚Äñ ^ q * ‚Äñ((1 + ‚Äñx - v‚Äñ) ^ (q + m))‚Åª¬π‚Äñ)
      invPowMeasure := by
    have hr1 (x : EuclideanSpace ‚Ñù (Fin dm1.succ)) :
        ‚Äñ((1 + ‚Äñx - v‚Äñ) ^ (q + m))‚Åª¬π‚Äñ = ((1 + ‚Äñx - v‚Äñ) ^ (q + m))‚Åª¬π := by
      simp only [Nat.succ_eq_add_one, norm_inv, norm_pow, Real.norm_eq_abs, inv_inj]
      rw [abs_of_nonneg (by positivity)]
    apply integrable_of_le_of_pow_mul_le (C‚ÇÅ := 1) (C‚ÇÇ :=2 ^ (q + m - 1) * (‚Äñv‚Äñ ^ (q + m) + 1))
    ¬∑ simp
      intro x
      refine inv_le_one_of_one_le‚ÇÄ ?_
      rw [abs_of_nonneg (by positivity)]
      refine one_le_pow‚ÇÄ ?_
      simp
    ¬∑ intro x
      rw [hr1]
      refine mul_inv_le_of_le_mul‚ÇÄ ?_ (by positivity) ?_
      ¬∑ positivity
      change ‚Äñx‚Äñ^ (q + m) ‚â§ _
      by_cases hzero : m = 0 ‚àß q = 0
      ¬∑ rcases hzero with ‚ü®hm, hq‚ü©
        generalize hm : m = m' at *
        subst hm hq
        rw [pow_zero, pow_zero]
        simp
      trans (‚Äñv‚Äñ + ‚Äñx - v‚Äñ) ^ (q + m)
      ¬∑ rw [pow_le_pow_iff_left‚ÇÄ]
        ¬∑ apply norm_le_norm_add_norm_sub'
        ¬∑ positivity
        ¬∑ positivity
        simp only [ne_eq, Nat.add_eq_zero, not_and]
        intro hq
        omega
      apply (add_pow_le _ _ _).trans
      trans 2 ^ (q + m - 1) * (‚Äñv‚Äñ ^ (q + m) + ‚Äñx - v‚Äñ ^ (q + m)) + (2 ^ (q + m - 1)
        + 2 ^ (q + m - 1) * ‚Äñv‚Äñ ^ (q + m) * ‚Äñx - v‚Äñ ^ (q + m))
      ¬∑ simp
        positivity
      trans (2 ^ (q + m - 1) * (‚Äñv‚Äñ ^ (q + m) + 1)) * (1 + ‚Äñx - v‚Äñ ^ (q + m))
      ¬∑ ring_nf
        apply le_of_eq
        rfl
      refine mul_le_mul_of_nonneg (by rfl) ?_ ?_ ?_
      ¬∑ trans 1 ^ (q + m) + ‚Äñx - v‚Äñ ^ (q + m)
        ¬∑ simp
        apply pow_add_pow_le
        ¬∑ simp
        ¬∑ positivity
        ¬∑ simp
          omega
      ¬∑ positivity
      ¬∑ positivity
      ¬∑ positivity
      ¬∑ positivity
    ¬∑ refine Measurable.aestronglyMeasurable ?_
      fun_prop
  have h0' (q : ‚Ñï) :
      Integrable (fun x => ‚Äñx‚Äñ ^ (q - dm1 : ‚Ñ§) * ‚Äñ((1 + ‚Äñx - v‚Äñ) ^ (q + m))‚Åª¬π‚Äñ) volume := by
    specialize h0 q
    rw [invPowMeasure] at h0
    rw [MeasureTheory.integrable_withDensity_iff] at h0
    apply Integrable.congr h0
    rw [Filter.eventuallyEq_iff_exists_mem]
    use {0}·∂ú
    constructor
    ¬∑ rw [compl_mem_ae_iff, measure_singleton]
    intro x hx
    simp only [Nat.succ_eq_add_one, norm_inv, norm_pow, Real.norm_eq_abs, one_div, inv_nonneg,
      norm_nonneg, pow_nonneg, ENNReal.toReal_ofReal]
    simp at hx
    field_simp
    have hx': ‚Äñx‚Äñ ‚â† 0 := by simpa using hx
    rw [zpow_sub‚ÇÄ hx']
    simp only [Nat.succ_eq_add_one, zpow_natCast]
    field_simp
    ring_nf
    ¬∑ fun_prop
    ¬∑ filter_upwards with x
      simp
  have h2 (q : ‚Ñï) : Integrable (fun x => ‚Äñx + v‚Äñ ^ (q - dm1 : ‚Ñ§)
      * ‚Äñ((1 + ‚Äñx‚Äñ) ^ (q + (invPowMeasure (dm1 := dm1)).integrablePower))‚Åª¬π‚Äñ) volume := by
    convert (h0' q).comp_add_right v using 1
    funext x
    simp [m]
  apply Integrable.mono' (h2 (p + dm1).toNat)
  ¬∑ fun_prop
  rw [Filter.eventually_iff_exists_mem]
  use {0}·∂ú
  constructor
  ¬∑ rw [compl_mem_ae_iff, measure_singleton]
  intro x hx
  refine norm_mul_le_of_le ?_ ?_
  simp only [Nat.succ_eq_add_one, norm_zpow, norm_norm, Int.ofNat_toNat]
  apply le_of_eq
  congr
  rw [max_eq_left]
  simp only [add_sub_cancel_right]
  omega
  simp only [Nat.succ_eq_add_one, norm_inv, norm_pow, Real.norm_eq_abs, abs_abs]
  refine inv_pow_le_inv_pow_of_le ?_ ?_
  ¬∑ rw [abs_of_nonneg (by positivity)]
    simp
  ¬∑ exact r_bound

lemma IsDistBounded.norm_inv_mul_exists_pow_integrable {dm1 : ‚Ñï}
    (f : EuclideanSpace ‚Ñù (Fin dm1.succ) ‚Üí F) (hf : IsDistBounded f)
    (hae: AEStronglyMeasurable (fun x => f x) volume) :
    ‚àÉ r, Integrable (fun x => ‚Äñf x‚Äñ * ‚Äñ((1 + ‚Äñx‚Äñ) ^ r)‚Åª¬π‚Äñ) volume := by
  rcases hf with ‚ü®n, c, g, p, c_nonneg, p_bound, hbound‚ü©
  induction' n with n ih
  ¬∑ simp at hbound
    conv =>
      enter [1, r, 1, x]
      rw [hbound]
    simp
  let pMax := Finset.max' (Finset.image p Finset.univ) (by simp)
  have pMax_max (i : Fin n.succ) : p i ‚â§ pMax := by
    simp [pMax]
    apply Finset.le_max'
    simp
  use (pMax + ‚Üëdm1).toNat + (invPowMeasure (dm1 := dm1)).integrablePower
  apply Integrable.mono' (g := fun x => ‚àë i, c i * ‚Äñx + g i‚Äñ ^ p i
      * ‚Äñ((1 + ‚Äñx‚Äñ) ^ ((pMax + ‚Üëdm1).toNat + (invPowMeasure (dm1 := dm1)).integrablePower))‚Åª¬π‚Äñ) _
  ¬∑ apply AEStronglyMeasurable.mul
    ¬∑ fun_prop
    ¬∑ refine Measurable.aestronglyMeasurable ?_
      fun_prop
  ¬∑ filter_upwards with x
    simp [Nat.succ_eq_add_one, norm_inv, norm_pow, Real.norm_eq_abs, norm_mul, abs_abs]
    rw [‚Üê Finset.sum_mul]
    refine mul_le_mul_of_nonneg (hbound x) ?_ ?_ ?_
    ¬∑ rfl
    ¬∑ exact norm_nonneg (f x)
    ¬∑ positivity
  apply MeasureTheory.integrable_finset_sum
  intro i _
  conv =>
    enter [1, x]
    rw [mul_assoc]
  apply Integrable.const_mul
  apply intergrable_pow (p i) _ (p_bound i)
  simp only [Nat.succ_eq_add_one, add_le_add_iff_right, Int.toNat_le, Int.ofNat_toNat, le_sup_iff]
  left
  exact pMax_max i

open InnerProductSpace

end Distribution
