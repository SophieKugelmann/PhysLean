/-
Copyright (c) 2025 Joseph Tooby-Smith. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Joseph Tooby-Smith
-/
import PhysLean.QuantumMechanics.OneDimension.HilbertSpace.PositionStates
import PhysLean.QuantumMechanics.OneDimension.Operators.Unbounded
import PhysLean.Mathematics.Distribution.PowMul
/-!

# Position operator

In this module we define:
- The position operator on functions `‚Ñù ‚Üí ‚ÑÇ`
- The position operator on Schwartz maps as an unbounded operator on the Hilbert space.

We show that position wavefunctions are generalized eigenvectors of the position operator.

-/

namespace QuantumMechanics

namespace OneDimension
noncomputable section
open Constants
open HilbertSpace

/-!

## The position operator on functions `‚Ñù ‚Üí ‚ÑÇ`

-/

/-- The position operator is defined as the linear map from `‚Ñù ‚Üí ‚ÑÇ` to `‚Ñù ‚Üí ‚ÑÇ` taking
  `œà` to `x * œà`. -/
def positionOperator : (‚Ñù ‚Üí ‚ÑÇ) ‚Üí‚Çó[‚ÑÇ] ‚Ñù ‚Üí ‚ÑÇ where
  toFun œà := fun x ‚Ü¶ x * œà x
  map_add' œà1 œà2 := by
    funext x
    simp only [Pi.add_apply]
    ring
  map_smul' a œà1 := by
    funext x
    simp only [Pi.smul_apply, smul_eq_mul, RingHom.id_apply]
    ring
/-!

## The position operator on Schwartz maps

-/

open ContDiff

open SchwartzMap

/-- The parity operator on the Schwartz maps is defined as the linear map from
  `ùì¢(‚Ñù, ‚ÑÇ)` to itself, such that `œà` is taken to `fun x => x * œà x`. -/
def positionOperatorSchwartz : ùì¢(‚Ñù, ‚ÑÇ) ‚ÜíL[‚ÑÇ] ùì¢(‚Ñù, ‚ÑÇ) := Distribution.powOneMul ‚ÑÇ

lemma positionOperatorSchwartz_apply_fun (œà : ùì¢(‚Ñù, ‚ÑÇ)) :
    (positionOperatorSchwartz œà) = fun x => x * œà x := by
  simp [positionOperatorSchwartz]
  rfl

@[simp]
lemma positionOperatorSchwartz_apply (œà : ùì¢(‚Ñù, ‚ÑÇ)) (x : ‚Ñù) :
    (positionOperatorSchwartz œà) x = x * œà x := by
  simp [positionOperatorSchwartz]
  rfl

/-- The unbounded position operator, whose domain is Schwartz maps. -/
def positionOperatorUnbounded : UnboundedOperator schwartzIncl schwartzIncl_injective :=
  UnboundedOperator.ofSelfCLM positionOperatorSchwartz

/-!

## Generalized eigenvectors of the momentum operator

-/

lemma positionStates_generalized_eigenvector_positionOperatorUnbounded (x : ‚Ñù) :
    positionOperatorUnbounded.IsGeneralizedEigenvector (positionState x) x := by
  dsimp [positionOperatorUnbounded]
  rw [UnboundedOperator.isGeneralizedEigenvector_ofSelfCLM_iff]
  intro œà
  simp [positionState_apply]

/-!

## Position operator is self adjoint

-/

lemma positionOperatorUnbounded_isSelfAdjoint :
    positionOperatorUnbounded.IsSelfAdjoint := by
  intro œà1 œà2
  dsimp [positionOperatorUnbounded]
  rw [schwartzIncl_inner, schwartzIncl_inner]
  congr
  funext x
  simp only [positionOperatorSchwartz_apply, map_mul, Complex.conj_ofReal]
  ring

end
end OneDimension
end QuantumMechanics
